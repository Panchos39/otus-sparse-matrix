#ifndef OTUS_SPARSE_MATRIX_INDEXER_H
#define OTUS_SPARSE_MATRIX_INDEXER_H

#include <memory>

/*!
@file
@brief Заголовочный файл, содержащий шаблон класса помощника Indexer,
 позволяющего работать с оператором [] и многомерной матрицей
*/
namespace otus_sparse_matrix {

    /**
        * @class Indexer
        * @brief Класс помощник для SparseMatrix, обеспечивающий функциональность
            оператора [] для многомерных случаев
        * @tparam Matrix тип данных с разреженной матрицей
        * @tparam T тип элемента, хранящийся в матрице
        * @tparam Dims количество измерений в матрице. По умолчанию 2 измерения.
    */
    template <typename Matrix, typename T, size_t Dims=2 >
    class Indexer {
    private :
        int m_Index;
        Matrix* m_SparseMat;
        std::array<T, Dims> m_Key;
    public:
        /**
            * @brief Конструктор класса помощника Indexer, принимающий полный ключ для обращения
                к элементу разреженной матрицы.
            * @param  mat разреженная матрица, к которой необходимо обратиться по ключу
            * @param key полный ключ, для обращения к определенному значению матрицы
        */
        Indexer(Matrix* mat, std::array<T, Dims> key);

        /**
            * @brief Конструктор класса помощника Indexer, принимающий индекс только одного измерения
                для обращения к элементу разреженной матрицы. Далее возможно следующее обращение:
                mat[0][1][2][0]...[1]
            * @param  mat разреженная матрица, к которой необходимо обратиться по ключу
            * @param index индекс по первому измерению разреженной матрицы
        */
        Indexer(Matrix* mat, size_t index);

        /**
            * @brief Перегрузка оператора [].
            * @param i индекс, который передается в оператор [].
            * @returns объект помощник Indexer, к которому в дальнейшем снова будет
                применен оператор [], но доступ уже будет к следующему измерению.
        */
        Indexer& operator[](size_t i);

        /**
            * @brief Метод возвращающий значение матрицы по сформированному ключу m_Key.
                Если ключ полностью не сформирован, а именно не указаны индексы для всех
                измерений, будет ошибка.
            * @returns значение элемента разряженной матрицы по ключу m_Key.
        */
        const auto& get() const;

        /**
            * @brief Каноническая форма оператора =, допускающая для матрицы выражения
                ((mat[100][100] = 314) = 0) = 217.
            * @param value значение, которое необходимо присвоить элементу матрицы
            * @returns ссылка на элемент разряженной матрицы по ключу m_Key.
                Можно в дальнейшем переприсвоить
        */
        Indexer& operator=(T value);

        /**
            * @brief Перегрузка оператора равенства ==
            * @param value значение, с которым происходит сравнение
            * @returns результат сравнения, true или false
        */
        bool operator==(const T& value) const;
    };

} // otus_sparse_matrix

#include "indexer.tpp"
#endif //OTUS_SPARSE_MATRIX_INDEXER_H
